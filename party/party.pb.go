// Code generated by protoc-gen-go. DO NOT EDIT.
// source: party.proto

/*
Package party is a generated protocol buffer package.

It is generated from these files:
	party.proto

It has these top-level messages:
	Version
	Empty
*/
package party

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Version struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Version) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Version)(nil), "party.Version")
	proto.RegisterType((*Empty)(nil), "party.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Party service

type PartyClient interface {
	GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Version, error)
}

type partyClient struct {
	cc *grpc.ClientConn
}

func NewPartyClient(cc *grpc.ClientConn) PartyClient {
	return &partyClient{cc}
}

func (c *partyClient) GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := grpc.Invoke(ctx, "/party.Party/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Party service

type PartyServer interface {
	GetVersion(context.Context, *Empty) (*Version, error)
}

func RegisterPartyServer(s *grpc.Server, srv PartyServer) {
	s.RegisterService(&_Party_serviceDesc, srv)
}

func _Party_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/party.Party/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServer).GetVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Party_serviceDesc = grpc.ServiceDesc{
	ServiceName: "party.Party",
	HandlerType: (*PartyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Party_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "party.proto",
}

func init() { proto.RegisterFile("party.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 111 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x48, 0x2c, 0x2a,
	0xa9, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x94, 0xb9, 0xd8, 0xc3,
	0x52, 0x8b, 0x8a, 0x33, 0xf3, 0xf3, 0x84, 0x24, 0xb8, 0xd8, 0xcb, 0x20, 0x4c, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0xce, 0x20, 0x18, 0x57, 0x89, 0x9d, 0x8b, 0xd5, 0x35, 0xb7, 0xa0, 0xa4, 0xd2, 0xc8,
	0x94, 0x8b, 0x35, 0x00, 0xa4, 0x4d, 0x48, 0x87, 0x8b, 0xcb, 0x3d, 0xb5, 0x04, 0xa6, 0x93, 0x47,
	0x0f, 0x62, 0x32, 0x58, 0x91, 0x14, 0x1f, 0x94, 0x07, 0x95, 0x55, 0x62, 0x48, 0x62, 0x03, 0x5b,
	0x69, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x16, 0x06, 0x1d, 0x81, 0x00, 0x00, 0x00,
}
